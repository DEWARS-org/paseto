import { expect } from "@std/expect";
import {
  PasetoSignatureInvalid,
  PasetoTokenInvalid,
} from "../../lib/utils/errors.ts";
import { stringToUint8Array } from "../../lib/utils/uint8array.ts";
import { sign } from "../../lib/v4/sign.ts";
import { verify } from "../../lib/v4/verify.ts";

const keys = {
  secretKey:
    "k4.secret.FgbULh0ylLoBsG6KRi2ZM0ZDzNMgaCBp1jB0sbf8OXGBf_1Cd0wyDa76n-iN0qGj0vaYSu5QXdZhbj5lUWhkyA",
  publicKey: "k4.public.gX_9QndMMg2u-p_ojdKho9L2mEruUF3WYW4-ZVFoZMg",
};
const PANVA_MESSAGE = JSON.stringify({
  sub: "napoleon",
  iat: "2023-01-13T14:36:14.754Z",
  exp: "3023-01-09T15:34:46.865Z",
});
const PANVA_TOKEN =
  "v4.public.eyJzdWIiOiJuYXBvbGVvbiIsImlhdCI6IjIwMjMtMDEtMTNUMTQ6MzY6MTQuNzU0WiIsImV4cCI6IjMwMjMtMDEtMDlUMTU6MzQ6NDYuODY1WiJ9DwetzN2O8ReSqW1MjRl__QOjIMPg2fTc6HnWdbDHbO74bj4idH20nxfvUG3NTI0k5iMNcWwYAf6dIl3yZ2PJBA";

Deno.test("it verifies a PASETO v4.public token generated using the supplied Ed25519 keys", () => {
  const token = sign(keys.secretKey, PANVA_MESSAGE);
  const result = verify(keys.publicKey, token);
  expect(result.payload.sub).toBe("napoleon");
});

Deno.test("it verifies a PASETO v4.public token generated by panva/paseto", () => {
  const result = verify(keys.publicKey, PANVA_TOKEN);
  expect(result.payload.sub).toBe("napoleon");
});

Deno.test("it verifies a PASETO v4.public token generated by panva/paseto (uint8array input)", () => {
  const result = verify(keys.publicKey, stringToUint8Array(PANVA_TOKEN));
  expect(result.payload.sub).toBe("napoleon");
});

Deno.test("it throws if the token is invalid", () => {
  expect(() => verify(keys.publicKey, "a" + PANVA_TOKEN)).toThrow(
    PasetoTokenInvalid,
  );
});

Deno.test("it throws if the token is invalid", () => {
  expect(() => verify<{ foo: string }>(keys.publicKey, PANVA_TOKEN + "a"))
    .toThrow(PasetoSignatureInvalid);
});

Deno.test("it throws if the token is invalid (uint8array)", () => {
  expect(() => verify(keys.publicKey, stringToUint8Array("a" + PANVA_TOKEN)))
    .toThrow(PasetoTokenInvalid);
});

Deno.test("it throws if the token is not a string or uint8array", () => {
  expect(() => verify(keys.publicKey, 1 as any)).toThrow(PasetoTokenInvalid);
});

Deno.test("it verifies a token with a footer", () => {
  const token = sign(keys.secretKey, PANVA_MESSAGE, {
    footer: "test",
  });
  const result = verify(keys.publicKey, token);
  expect(result.payload.sub).toBe("napoleon");
  expect(result.footer).toBe("test");
});

Deno.test("it throws if token has more than 4 parts", () => {
  expect(() => verify(keys.publicKey, PANVA_TOKEN + ".a.b.c")).toThrow(
    PasetoTokenInvalid,
  );
});

Deno.test("it throws if payload is less than 64 bytes", () => {
  expect(() => verify(keys.publicKey, "v4.public.abc")).toThrow(
    PasetoTokenInvalid,
  );
});

Deno.test("it uses an assertion if provided", () => {
  const token = sign(keys.secretKey, PANVA_MESSAGE, {
    footer: "test",
    assertion: "abc",
  });
  const result = verify(keys.publicKey, token, {
    assertion: "abc",
  });
  expect(result.payload.sub).toBe("napoleon");
  expect(result.footer).toBe("test");
});

Deno.test("it fails if assertion is incorrect", () => {
  const token = sign(keys.secretKey, PANVA_MESSAGE, {
    footer: "test",
    assertion: "abc",
  });
  expect(() => verify(keys.publicKey, token, { assertion: "abcd" })).toThrow(
    PasetoSignatureInvalid,
  );
});
